---
###################
### SQUID SETUP ###
###################

- name: Ensure "python3-selinux" pkg is installed
  ansible.builtin.package:
    name: "python3-selinux"
    state: present

- name: Check if SELinux is installed
  ansible.builtin.find:
    paths: "/etc/selinux"
    hidden: false
    file_type: file
    patterns: "config"
    recurse: false
  register: selinux_result

- name: Configuring SELinux in permissive mode
  ansible.posix.selinux:
    policy: targeted
    state: permissive
  when: (selinux_result.files | length > 0)

- name: Ensure Firewalld/Iptables service are stopped
  ansible.builtin.service:
    name: "{{ item_firewalld_svc }}"
    state: stopped
    enabled: false
  loop:
    - firewalld
    - iptables
  loop_control:
    loop_var: item_firewalld_svc
  ignore_errors: true

- name: Adding Apt signing key
  ansible.builtin.apt_key:
    url: "{{ squid.apt_key }}"
    state: present

- name: Adding Squid Debian repository
  ansible.builtin.apt_repository:
    repo: "{{ squid.apt_repo }}"
    state: present
    filename: "{{ squid.apt_local_repo_file }}"
    update_cache: true

- name: Installing required packages
  ansible.builtin.package:
    name: "{{ item_squid_requirements }}"
    state: present
  loop: "{{ squid.requirements }}"
  loop_control:
    loop_var: item_squid_requirements

- name: Gather packages facts
  ansible.builtin.package_facts:
    manager: apt

- name: UnPin Squid packages (apt)
  ansible.builtin.dpkg_selections:
    name: "{{ item_squid_pkgs_pin }}"
    selection: install
  changed_when: false
  with_items: "{{ squid.pkgs }}"
  loop_control:
    loop_var: item_squid_pkgs_pin
  when: (ansible_pkg_mgr == 'apt') and
        (not squid_pin | bool) and
        (("squid-common" in ansible_facts.packages) or
         ("squid-openssl" in ansible_facts.packages) or
         ("squidclient" in ansible_facts.packages))

- name: Installing Squid packages
  ansible.builtin.package:
    name: "{{ item_squid_pkgs }}={{ squid.version }}"
    state: present
  loop: "{{ squid.pkgs }}"
  loop_control:
    loop_var: item_squid_pkgs

- name: Pin Squid packages (apt)
  ansible.builtin.dpkg_selections:
    name: "{{ item_squid_pkgs_pin }}"
    selection: hold
  changed_when: false
  with_items: "{{ squid.pkgs }}"
  loop_control:
    loop_var: item_squid_pkgs_pin
  when: (ansible_pkg_mgr == 'apt') and
        (squid_pin)

- name: Ensure Self Signed certificates directory exists
  ansible.builtin.file:
    path: "{{ squid_certs_dir.path }}"
    mode: "{{ squid_certs_dir.mode }}"
    state: "directory"
    owner: "{{ squid_certs_dir.owner }}"
    group: "{{ squid_certs_dir.group }}"
    recurse: true

- name: Retrieving Self Signed certificates
  ansible.builtin.find:
    paths: "{{ squid_certs_dir.path }}"
    hidden: false
    file_type: any
    recurse: false
  register: certs_result

- name: Generating and Copying Self Signed certificates
  block:

    - name: Ensure Squid service is stopped
      ansible.builtin.service:
        name: squid
        state: stopped
        enabled: true

    - name: Creating Self Signed certificates
      ansible.builtin.shell: |
        openssl req -new -newkey rsa:2048 -sha256 -days 36500 -nodes -x509 -extensions v3_ca -keyout "{{ squid_certs_dir.path }}"/"{{ squid_certs_key }}" -out "{{ squid_certs_dir.path }}"/"{{ squid_certs_cert }}" -subj "/CN=*.{{ domain_name }}"
        cat "{{ squid_certs_dir.path }}"/"{{ squid_certs_cert }}" "{{ squid_certs_dir.path }}"/"{{ squid_certs_key }}" > "{{ squid_certs_dir.path }}"/"{{ squid_certs_chain }}"

    - name: Ensure ownership of Self Signed certificates directory is correct
      ansible.builtin.file:
        path: "{{ squid_certs_dir.path }}"
        mode: "{{ squid_certs_dir.mode }}"
        state: "directory"
        owner: "{{ squid_certs_dir.owner }}"
        group: "{{ squid_certs_dir.group }}"
        recurse: true

  when: (certs_result.files | length == 0) or
        (full_reconfig | bool)

- name: Verifying Squid config
  block:

    - name: Copying temporary Squid template
      ansible.builtin.template:
        src: squid.conf.j2
        dest: "/tmp/squid.conf"
        mode: "0644"
        owner: "root"
        group: "root"

    - name: Squid template syntax check
      ansible.builtin.command: squid -k parse -f /tmp/squid.conf

    - name: Copying Squid template
      ansible.builtin.template:
        src: squid.conf.j2
        dest: "/etc/squid/squid.conf"
        mode: "0644"
        owner: "root"
        group: "root"
      notify:
        - Squid_Restart

    - name: Remove temporary Squid template
      ansible.builtin.file:
        state: absent
        path: "/tmp/squid.conf"
  rescue:
    - name: Remove temporary Squid template
      ansible.builtin.file:
        state: absent
        path: "/tmp/squid.conf"
    - name: Failing play
      ansible.builtin.fail:
        msg: "Syntax check error on squid.conf template. Please check!"

- name: Enabling & Starting Squid Service
  ansible.builtin.service:
    name: "squid"
    enabled: true
    state: started

- name: Copying locally the SSL certificate file to mount on the agent
  ansible.builtin.fetch:
    src: "{{ squid_certs_dir.path }}/{{ squid_certs_cert }}"
    dest: "{{ squid_certs_local_path }}"
    flat: true

- name: Printing certificate location
  ansible.builtin.debug:
    msg: "The SSL certificate has been saved as {{ squid_certs_local_path }}"
